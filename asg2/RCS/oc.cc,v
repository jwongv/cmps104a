head	1.10;
access;
symbols;
locks;
comment	@// @;


1.10
date	2013.10.29.05.54.59;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.10.28.10.34.20;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.10.15.05.24.58;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.10.15.05.17.46;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.10.15.04.31.37;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.10.15.04.29.45;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.10.14.02.56.11;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.10.14.00.50.49;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.10.12.23.50.43;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.10.12.22.48.34;	author jagwong;	state -;
branches;
next	;


desc
@@


1.10
log
@-
@
text
@//Jacky Wong
//jagwong@@ucsc.edu
//ID: 1281439

#include <string>
using namespace std;

#include <errno.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wait.h>

#include "lyutils.h"
#include "auxlib.h"
#include "stringset.h"
#include "astree.h"

const string CPP = "/usr/bin/cpp";
const size_t LINESIZE = 1024;

void chomp(char *string, char delim){
   size_t len = strlen(string);
   if(len == 0) return;
   char *nlpos = string + len -1;
   if(*nlpos == delim) *nlpos = '\0';
}

void cpplines(FILE *pipe, char *filename){
   int linenr = 1;
   char inputname[LINESIZE];
   strcpy(inputname, filename);
   for(;;){
      char buffer[LINESIZE];
      char *fgets_rc = fgets(buffer, LINESIZE, pipe); 
      if(fgets_rc == NULL) break;
      chomp (buffer, '\n');
      int sscanf_rc = sscanf(buffer, "# %d \"%[^\"]\"",
                             &linenr, filename);
      if(sscanf_rc == 2) continue;
      char *savepos = NULL;
      char *bufptr = buffer;
      for(int tokenct = 1;; ++tokenct){
         char *token = strtok_r (bufptr, " \t\n", &savepos);
         bufptr = NULL;
         if(token == NULL) break;
         intern_stringset(token);
      }
      ++linenr;
   }
}




int main(int argc, char **argv){

   set_execname(argv[0]);
   extern int yy_flex_debug;
   extern int yydebug;
   yy_flex_debug = 0;
   yydebug = 0;
   int Dopt = 0;
   int Darg = 0;
   int opt = 0;
   extern FILE* tokoutputfile;

   while((opt = getopt(argc, argv, "yl:@@:D:")) != -1){
      switch(opt){
      case'y':
         yydebug = 1;
         break;
      case'l':
         yy_flex_debug = 1;
         break;
      case'@@':
         set_debugflags(optarg);
         break;
      case'D':
         Dopt = 1;
         Darg = optind - 1;
         break;
      default:
         fprintf(stderr, "Not a valid option!\n"); 
         set_exitstatus(1);
         break;
      }
   }

   for(int argi = optind; argi < argc; ++argi){
      char *filename = argv[argi];
      char output[512];
      char stroutput[512];
      char tokoutput[512];
      strcpy(output, basename(filename));
         char *periodpos = strrchr(output, '.');
         if(periodpos == NULL){
            fprintf(stderr, "Not a .oc file!\n");
            set_exitstatus(1);
            continue;
         }
         int lastperiod = periodpos - output;
         if(periodpos != NULL && 
            strcmp(&output[lastperiod], ".oc\0") != 0){
            fprintf(stderr,"Not a .oc file!\n");
            set_exitstatus(1);
            continue;
         }
         output[lastperiod] = '\0';
         strcpy(stroutput, output);
         strcpy(tokoutput, output);
         strcat(stroutput, ".str");
         strcat(tokoutput, ".tok");
      string command;
      if(Dopt){ //if -D opt enabled, pass it to CPP
         command = CPP + " " + argv[Darg] + " " + filename;
      }else
         command = CPP + " " + filename;
      yyin = popen(command.c_str(), "r");
      FILE *stroutputfile = fopen(stroutput, "w");
      tokoutputfile = fopen(tokoutput, "w");
      if(yyin == NULL){
         syserrprintf(command.c_str());
      }else{
         cpplines (yyin, filename);
         int pclose_rc = pclose(yyin);
         if(pclose_rc != 0) set_exitstatus(1);
         eprint_status(command.c_str(), pclose_rc);
      }
      dump_stringset(stroutputfile);
      fclose(stroutputfile);

      yyin = popen(command.c_str(), "r");
      if(yyin == NULL){
         syserrprintf(command.c_str());
      }else{
         for(;;){
            int yylex_rt = yylex();
            if(yylex_rt == YYEOF)   break;
         }
         int pclose_rc = pclose(yyin);
         eprint_status(command.c_str(), pclose_rc);
      }
      fclose(tokoutputfile);
   }
   return get_exitstatus();

}












@


1.9
log
@-
@
text
@d128 1
@


1.8
log
@-
@
text
@d15 1
d18 1
d60 4
a63 2
   int yy_flex_debug = 0;
   int yydebug = 0;
d67 1
d94 2
d111 4
a114 1
         strcat(output, ".str");
a116 1
         printf("rawr\n");
a117 1
         printf("rawr\n");
d120 4
a123 3
      FILE *pipe = popen(command.c_str(), "r");
      FILE *outputfile = fopen(output, "w");
      if(pipe == NULL){
d126 2
a127 2
         cpplines (pipe, filename);
         int pclose_rc = pclose(pipe);
d130 15
a144 1
      dump_stringset(outputfile);
@


1.7
log
@-
@
text
@d1 4
@


1.6
log
@-
@
text
@d33 3
a35 1
      
d59 1
d76 2
a77 1
         printf("Not a valid option!\n"); // change to stderror later!
d89 1
d96 1
d102 1
a102 1
      if(Dopt){
a107 1
      printf("command=\"%s\"\n", command.c_str());
@


1.5
log
@-
@
text
@d30 1
a30 1
      char *fgets_rc = fgets(buffer, LINESIZE, pipe); //scans a line to buffer
a81 1
  //    if(output[0] != '-'){
d88 2
a89 1
         if(periodpos != NULL && strcmp(&output[lastperiod], ".oc\0") != 0){
a94 1
    //  }
@


1.4
log
@-
@
text
@d51 6
a56 3
   set_execname(arv[0]);

   int opt;
d60 1
d63 1
d68 4
a77 1

d80 23
a102 2
      char *output = basename(filename) + ".str";
      string command = CPP + " " + filename;
@


1.3
log
@-
@
text
@a32 3
      //debug
   ///   int scanf_rc = sscanf (buffer, "# %d \"%[^\"]\"",
      //                       &linenr, filename); //takes the line and 
d40 1
a40 1
         //print the token? maybe insert to stringset
d44 1
a46 1
}
d49 1
d51 1
a52 1
int main(int argc, char **argv){
d69 1
a69 1
   set_execname (argv[0]);
d72 1
d76 1
d84 1
a87 1

@


1.2
log
@-
@
text
@d24 30
d65 18
d85 1
d89 12
@


1.1
log
@Initial revision
@
text
@d14 10
a34 1

@
